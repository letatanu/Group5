package project.terminal;

/**
 * StringEntryMenu - A class which narrows the scope of the TerminalMenu to just the String Type.
 *     Additionally, it adds support to check for particular properties in the entry.
 *
 * Created by Ashton on 10/16/2016.
 */
public class StringEntryMenu extends SingleLineEntryMenu<String> {

    //Common Regular Expressions
    public final static String ALPHABET_ONLY_REGEX = "[a-zA-Z]";
    public final static String INTEGER_ONLY_REGEX = "[0-9]";

    //Default Settings
    private final static int DEFAULT_MIN_LENGTH = 1;
    private final static int DEFAULT_MAX_LENGTH = 500;

    //Settings
    private int minLength = DEFAULT_MIN_LENGTH;
    private int maxLength = DEFAULT_MAX_LENGTH;
    private String regex = "";

    //Constructors
    public StringEntryMenu(String name, String body, String entry_prompt, String regex, int minLength, int maxLength) {
        super(name, "", body, entry_prompt);
        this.regex = regex;
        this.minLength = minLength;
        this.maxLength = maxLength;
    }

    public StringEntryMenu(String name, String body, String entry_prompt, int minLength, int maxLength) {
        super(name, "", body, entry_prompt);
        this.minLength = minLength;
        this.maxLength = maxLength;
    }

    public StringEntryMenu(String name, String body, String entry_prompt, String regex) {
        super(name, "", body, entry_prompt);
        this.regex = regex;
    }

    public StringEntryMenu(String name, String body, String entry_prompt) {
        super(name, "", body, entry_prompt);
    }

    /**
     * Does NOT parse the input since the input is by default a String
     *
     * @param input - raw input from the user
     * @return entry
     */
    @Override
    protected String parseInputForEntry(String input) {
        return input;
    }

    /**
     * Generates a responseCode based on the settings
     *      0: Valid entry
     *     -1: Invalid Input
     *     -2: Less than minimum length
     *     -3: Greater than max length
     *     -4: If alphabet only and has non-alphabetical characters
     *
     * @return responseCode
     */
    @Override
    protected int generateEntryResponseCode() {
        int response_code = 0;
        if (entry != null) {
            if (entry.length() >= minLength) {
                if (entry.length() <= maxLength) {
                    if (!entry.matches(regex))
                        response_code = -4;
                } else
                    response_code = -3;
            } else
                response_code = -2;
        } else
            response_code = -1;
        return response_code;
    }

    /**
     * Prints the response based on the code given by generateEntryResponseCode
     *
     * @param responseCode - The response code generated by generateEntryResponseCode
     */
    @Override
    protected void printEntryResponse(int responseCode) {
        if (responseCode != 0) {
            switch (responseCode) {
                case -1:
                    System.out.println("Invalid Input!");
                    break;
                case -2:
                    System.out.println("Invalid Entry: Minimum Length is " + minLength);
                    break;
                case -3:
                    System.out.println("Invalid Entry: Maximum Length is " + maxLength);
                    break;
                case -4:
                    System.out.println("Invalid Entry!");
                    break;
                default:
                    System.out.println("Unknown Error!");
            }
        }
    }
}
