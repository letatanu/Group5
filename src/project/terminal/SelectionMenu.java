package project.terminal;

import java.util.ArrayList;

/**
 * SelectionMenu - An extension of the IntEntryMenu which uses the integer input to
 *     select from a list of options (TerminalMenus) given to the user. The menus will
 *     continue to nest until explicitly exited with an entry of 0
 *
 * Created by Ashton on 10/17/2016.
 */
public class SelectionMenu extends IntEntryMenu {

    //Default Settings
    private static final int EXIT_OPTION = 0;
    private static final String DEFAULT_EXIT_PHRASE = "Back";

    //Settings
    protected String exitPhrase = DEFAULT_EXIT_PHRASE;

    //List of TerminalMenus used as options to select from in the menu
    private ArrayList<TerminalMenu> selectionOptions;

    //Constructors
    public SelectionMenu(String name, String title, String body) {
        super(name, title, body, "Select Option");

        selectionOptions = new ArrayList<>();

        setExplicitExit(EXIT_OPTION); //Sets default exit option
    }

    public SelectionMenu(String name, String title, String body, String exitPhrase) {
        super(name, title, body, "Select Option");

        this.exitPhrase = exitPhrase;

        selectionOptions = new ArrayList<>();

        setExplicitExit(EXIT_OPTION); //Sets default exit option
    }

    /**
     * Adds a menu to the list of options to select from in the menu
     *
     * @param menu - TerminalMenu to be added to the options
     */
    public void addTerminalMenu(TerminalMenu menu) {
        selectionOptions.add(menu);
    }

    /**
     * Overrides default printMenu to additionally print a indented descending
     *     list of the selectionOptions by name with the associated selection
     *     number to the left.
     */
    @Override
    protected void printMenu() {
        super.printMenu();

        System.out.print('\n');

        int i = 1;
        for(TerminalMenu option : selectionOptions)
                System.out.println("      " + (i++) + ") " + option.getName());

        System.out.println("      " + EXIT_OPTION + ") " + exitPhrase);
    }

    /**
     * Generates a responseCode based on the settings
     *      0: Valid Entry
     *     -1: Invalid input or outside the range of selections
     *
     * @return responseCode
     */
    @Override
    protected int generateEntryResponseCode() {
        int response_code = -1;

        if (entry != null) {
            if (entry >= 0 && entry <= selectionOptions.size())
                response_code = 0;
        }

        return response_code;
    }

    /**
     * Prints "Invalid Selection" to any non-zero responseCode
     *
     * @param responseCode - The response code generated by generateEntryResponseCode
     */
    @Override
    protected void printEntryResponse(int responseCode) {
        if (responseCode != 0)
            System.out.println("Invalid Selection!");
    }

    /**
     * Processes non-exiting valid entry to run the selected menu
     */
    @Override
    protected void processValidEntry() {
        if (entry != EXIT_OPTION)
            selectionOptions.get(entry - 1).runMenu();
    }
}
